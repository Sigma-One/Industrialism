plugins {
    id 'org.quiltmc.loom' version '0.7.16'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.4.10'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven { // LibGui
        name = "CottonMC"
        url = "https://server.bbkr.space/artifactory/libs-release"
    }
    maven { // FOML
        name = "OnyxStudios"
        url = "https://maven.abusedmaster.xyz"
    }
    maven { // Fabric Kotlin
        name = "Fabric"
        url = "https://maven.fabricmc.net"
    }
    maven { // Patchouli
        name = "BlameJared"
        url = "https://maven.blamejared.com"
    }
    jcenter()
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "org.quiltmc:yarn:${project.yarn_mappings}"
    modImplementation ("org.quiltmc:quilt-loader:${project.loader_version}") { exclude group: "net.fabricmc", module: "fabric-loader" }

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation ("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}") { exclude group: "net.fabricmc", module: "fabric-loader" }

    // TeamReborn's Energy API (https://github.com/TechReborn/Energy)
    modApi ("teamreborn:energy:${project.energy_version}") { exclude group: "net.fabricmc", module: "fabric-loader" }
    include "teamreborn:energy:${project.energy_version}"

    // LibGui
    modImplementation ("io.github.cottonmc:LibGui:${project.libgui_version}") { exclude group: "net.fabricmc", module: "fabric-loader" }
    include "io.github.cottonmc:LibGui:${project.libgui_version}"

    // FOML
    modImplementation ("dev.onyxstudios:FOML:${project.foml_version}") { exclude group: "net.fabricmc", module: "fabric-loader" }
    include "dev.onyxstudios:FOML:${project.foml_version}"

    // Patchouli
    modImplementation ("vazkii.patchouli:Patchouli:${project.patchouli_version}") { exclude group: "net.fabricmc", module: "fabric-loader" }
    include "vazkii.patchouli:Patchouli:${project.patchouli_version}"


    // Fabric Kotlin module
    // modImplementation "net.fabricmc:fabric-language-kotlin:${project.kotlin_version}"

    // Artifice
    modImplementation ("com.lettuce.fudge:artifice:${project.artifice_version}") { exclude group: "net.fabricmc", module: "fabric-loader" }
    include "com.lettuce.fudge:artifice:${project.artifice_version}"


    // Loader deps

    // log4j
    implementation "org.apache.logging.log4j:log4j-core:${project.log4j_version}"
    implementation "org.apache.logging.log4j:log4j-api:${project.log4j_version}"
    annotationProcessor "org.apache.logging.log4j:log4j-core:${project.log4j_version}"
    annotationProcessor "org.apache.logging.log4j:log4j-api:${project.log4j_version}"

    // gson
    implementation "com.google.code.gson:gson:${project.gson_version}"

    // guava
    implementation "com.google.guava:guava:${project.guava_version}"

    // asm
    implementation "org.ow2.asm:asm:${project.asm_version}"
    implementation "org.ow2.asm:asm-commons:${project.asm_version}"
    implementation "org.ow2.asm:asm-util:${project.asm_version}"
    implementation "org.ow2.asm:asm-tree:${project.asm_version}"
    implementation "org.ow2.asm:asm-analysis:${project.asm_version}"

    // quilt things
    implementation "org.quiltmc:quilt-json5:${project.json5_version}"
    implementation "org.quiltmc:quilt-loader-sat4j:${project.sat4j_version}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

minecraft {
    accessWidener "src/main/resources/industrialism.accesswidener"
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}
repositories {
    mavenCentral()
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

/*tasks.withType( JavaCompile ).configureEach {
    options.forkOptions.jvmArgs.addAll( ['--add-opens', 'jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED'] )
}*/
